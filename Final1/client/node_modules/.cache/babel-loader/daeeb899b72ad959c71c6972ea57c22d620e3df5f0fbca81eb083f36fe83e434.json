{"ast":null,"code":"import axios from \"axios\";\nimport { API_Notification_Messages, SERVICE_URLS } from \"../constants/config\";\nconst API_URL = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // stop global loader here\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst ProcessError = async error => {\n  if (error.response) {\n    var _error$response;\n    // Request made and server responded with a status code \n    // that falls out of the range of 2xx\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      // const { url, config } = error.response;\n      // console.log(error);\n      // try {\n      //     let response = await API.getRefreshToken({ token: getRefreshToken() });\n      //     if (response.isSuccess) {\n      sessionStorage.clear();\n      //         setAccessToken(response.data.accessToken);\n\n      //         const requestData = error.toJSON();\n\n      //         let response1 = await axios({\n      //             method: requestData.config.method,\n      //             url: requestData.config.baseURL + requestData.config.url,\n      //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\n      //             params: requestData.config.params\n      //         });\n      //     }\n      // } catch (error) {\n      //     return Promise.reject(error)\n      // }\n    } else {\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n      return {\n        isError: true,\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\n        code: error.response.status\n      };\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: body,\n    responseType: value.responseType,\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentageCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_Notification_Messages","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","status","isSuccess","data","isFailure","msg","code","ProcessError","_error$response","sessionStorage","clear","console","log","toJSON","isError","API_NOTIFICATION_MESSAGES","responseFailure","requestFailure","networkError","_c","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","url","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["/home/raman/Final1/client/src/service/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nimport { API_Notification_Messages, SERVICE_URLS } from \"../constants/config\";\n\nconst API_URL = \"http://localhost:8000\";\n\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\naxiosInstance.interceptors.request.use(\n  function (config) {\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\naxiosInstance.interceptors.response.use(\n  function (response) {\n    // stop global loader here\n    return processResponse(response);\n  },\n  function (error) {\n    return Promise.reject(processError(error));\n  }\n);\n\nconst processResponse = (response) => {\n  if (response?.status === 200) {\n    return { isSuccess: true, data: response.data };\n  } else {\n    return {\n      isFailure: true,\n      status: response?.status,\n      msg: response?.msg,\n      code: response?.code,\n    };\n  }\n};\n\nconst ProcessError = async (error) => {\n    if (error.response) {\n        // Request made and server responded with a status code \n        // that falls out of the range of 2xx\n        if (error.response?.status === 403) {\n            // const { url, config } = error.response;\n            // console.log(error);\n            // try {\n            //     let response = await API.getRefreshToken({ token: getRefreshToken() });\n            //     if (response.isSuccess) {\n                    sessionStorage.clear();\n            //         setAccessToken(response.data.accessToken);\n\n            //         const requestData = error.toJSON();\n\n            //         let response1 = await axios({\n            //             method: requestData.config.method,\n            //             url: requestData.config.baseURL + requestData.config.url,\n            //             headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\n            //             params: requestData.config.params\n            //         });\n            //     }\n            // } catch (error) {\n            //     return Promise.reject(error)\n            // }\n        } else {\n            console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n            return {\n                isError: true,\n                msg: API_NOTIFICATION_MESSAGES.responseFailure,\n                code: error.response.status\n            }\n        }\n    } else if (error.request) { \n        // The request was made but no response was received\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\n            code: \"\"\n        }\n    } else { \n        // Something happened in setting up the request that triggered an Error\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATION_MESSAGES.networkError,\n            code: \"\"\n        }\n    }\n}\nconst API = {};\n\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) =>\n    axiosInstance({\n      method: value.method,\n      url: value.url,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progressEvent) {\n        if (showUploadProgress) {\n          let percentageCompleted = Math.round(\n            (progressEvent.loaded * 100) / progressEvent.total\n          );\n          showUploadProgress(percentageCompleted);\n        }\n      },\n      onDownloadProgress: function (progressEvent) {\n        if (showDownloadProgress) {\n          let percentageCompleted = Math.round(\n            (progressEvent.loaded * 100) / progressEvent.total\n          );\n          showDownloadProgress(percentageCompleted);\n        }\n      },\n    });\n}\n\n\nexport {API};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}