{"ast":null,"code":"import axios from \"axios\";\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from \"../constants/config\";\nconst API_URL = \"http://localhost:8000\";\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // stop global loader here\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    // requests made and server responded with a status other\n    //that falls out of the range 200\n    console.log(\"Error in Response\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // request made but no response was recieved\n    console.log(\"Error in Request\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_Notification_Messages.requestFailure,\n      code: \"\"\n    };\n  } else {\n    //  something happened in setting up request that triggers an error\n    console.log(\"Network Error  \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_Notification_Messages.netWorkError,\n      code: \"\"\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: body,\n    responseType: value.responseType,\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentageCompleted);\n      }\n    }\n  });\n}\nexport { API };","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","status","isSuccess","data","isFailure","msg","code","console","log","toJSON","isError","responseFailure","API_Notification_Messages","requestFailure","netWorkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","url","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["/home/raman/Final1/client/src/service/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from \"../constants/config\";\n\nconst API_URL = \"http://localhost:8000\";\n\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\naxiosInstance.interceptors.request.use(\n  function (config) {\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\naxiosInstance.interceptors.response.use(\n  function (response) {\n    // stop global loader here\n    return processResponse(response);\n  },\n  function (error) {\n    return Promise.reject(processError(error));\n  }\n);\n\nconst processResponse = (response) => {\n  if (response?.status === 200) {\n    return { isSuccess: true, data: response.data };\n  } else {\n    return {\n      isFailure: true,\n      status: response?.status,\n      msg: response?.msg,\n      code: response?.code,\n    };\n  }\n};\n\nconst processError = (error) => {\n  if (error.response) {\n    // requests made and server responded with a status other\n    //that falls out of the range 200\n    console.log(\"Error in Response\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status,\n    };\n  } else if (error.request) {\n    // request made but no response was recieved\n    console.log(\"Error in Request\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_Notification_Messages.requestFailure,\n      code: \"\",\n    };\n  } else {\n    //  something happened in setting up request that triggers an error\n    console.log(\"Network Error  \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_Notification_Messages.netWorkError,\n      code: \"\",\n    };\n  }\n};\n\nconst API = {};\n\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) =>\n    axiosInstance({\n      method: value.method,\n      url: value.url,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progressEvent) {\n        if (showUploadProgress) {\n          let percentageCompleted = Math.round(\n            (progressEvent.loaded * 100) / progressEvent.total\n          );\n          showUploadProgress(percentageCompleted);\n        }\n      },\n      onDownloadProgress: function (progressEvent) {\n        if (showDownloadProgress) {\n          let percentageCompleted = Math.round(\n            (progressEvent.loaded * 100) / progressEvent.total\n          );\n          showDownloadProgress(percentageCompleted);\n        }\n      },\n    });\n}\n\n\nexport {API};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}